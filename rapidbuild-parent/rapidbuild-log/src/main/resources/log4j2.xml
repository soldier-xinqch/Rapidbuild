<?xml version="1.0" encoding="UTF-8"?>
<!--
    主要配置为error日志与debug日志分别打印文件，errorLog按照分钟存档，debugLog按照日志文件大小存档，最多保存10个。
    status设置为debug，这样用户可以在Eclipse的console看到Log4j2启动和加载配置文件时的打印信息
    monitorInterval是用来设置配置文件的动态加载时间的，单位是秒。
 -->
<Configuration status="DEBUG" monitorInterval="300">
    <Properties>
        <Property name="log.path">.</Property>
        <Property name="log.app">.</Property>
    </Properties>
    <Appenders>
        <Console name="console-debug" target="SYSTEM_OUT">
            <PatternLayout pattern="[%-5level][%d{yyyy-MM-dd HH:mm:ss}][%F:%L] - %m%n" />
            <ThresholdFilter level="DEBUG" onMatch="ACCEPT" onMismatch="DENY"/>
        </Console>

        <Console name="console-error" target="SYSTEM_OUT">
            <PatternLayout pattern="[%-5level][%d{yyyy-MM-dd HH:mm:ss}][%F:%L] - %m%n" />
            <ThresholdFilter level="WARN" onMatch="ACCEPT" onMismatch="DENY"/>
        </Console>
        <!--Appender 2. 输出到滚动保存的文件, 触发保存日志文件的条件是日志文件大于3KB，只保存最新的10个日志 -->
        <RollingFile name="file-debug" fileName="${log.path}/${log.app}/debug/debug.log" filePattern="${log.path}/${log.app}/debug/debug-%i.log">
            <ThresholdFilter level="DEBUG" onMatch="ACCEPT" onMismatch="DENY"/>
            <PatternLayout pattern="[%-5level][%d{yyyy-MM-dd HH:mm:ss}][%F:%L] - %m%n" />
            <SizeBasedTriggeringPolicy size="50MB" />
            <!-- DefaultRolloverStrategy 中的参数max，可以限制 SizeBasedTriggeringPolicy中size超出后，只保留max个存档-->
            <DefaultRolloverStrategy max="30"/>
        </RollingFile>

        <RollingFile name="file-error" fileName="${log.path}/${log.app}/error/error.log" filePattern="${log.path}/${log.app}/error/error-%i.log">
            <ThresholdFilter level="WARN" onMatch="ACCEPT" onMismatch="DENY"/>
            <PatternLayout pattern="[%-5level][%d{yyyy-MM-dd HH:mm:ss}][%F:%L] - %m%n" />
            <SizeBasedTriggeringPolicy size="50MB" />
            <!-- DefaultRolloverStrategy 中的参数max，可以限制 SizeBasedTriggeringPolicy中size超出后，只保留max个存档-->
            <DefaultRolloverStrategy max="30"/>
        </RollingFile>

        <RollingRandomAccessFile name="TESTLOG" fileName="${LOG_HOME}/${LOG_FILE_NAME}/testlog"  filePattern="${LOG_HOME}/${LOG_FILE_NAME}/testlog.%d{yyyy-MM-dd-HH}.log">
            <PatternLayout>
                <charset>UTF-8</charset>
                <Pattern>${PATTERN_LOG}</Pattern>
            </PatternLayout>
            <Policies>
                <TimeBasedTriggeringPolicy interval="1" modulate="true" />
            </Policies>
        </RollingRandomAccessFile>

        <!-- 按日期每天生成log文件 -->
        <RollingFile name="RollingFile" fileName="temp/CL_BATCH.log"
                     filePattern="temp/CL_BATCH-%d{yyyy-MM-dd}.log">
            <PatternLayout pattern="%d %p %C{1.} [%t] %m%n"/>
            <Policies>
                <TimeBasedTriggeringPolicy interval="1"/>
            </Policies>

            <!-- log文件只打印error级别信息 -->
            <Filters>
                <ThresholdFilter level="error" onMatch="ACCEPT" onMismatch="DENY"/>
            </Filters>
        </RollingFile>
    </Appenders>
    <Loggers>
        <!-- 输出info级别信息 -->
        <Root level="info">
            <AppenderRef ref="Console" />
            <AppenderRef ref="RollingFile" />
        </Root>
    </Loggers>
</Configuration>


<!--
    %p: 输出日志信息优先级，即DEBUG，INFO，WARN，ERROR，FATAL,
    %d: 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyy MMM dd HH:mm:ss,SSS}，输出类似：2002年10月18日 22：10：28，921
    %r: 输出自应用启动到输出该log信息耗费的毫秒数
    %c: 输出日志信息所属的类目，通常就是所在类的全名
    %t: 输出产生该日志事件的线程名
    %l: 输出日志事件的发生位置，相当于%C.%M(%F:%L)的组合,包括类目名、发生的线程，以及在代码中的行数。举例：Testlog4.main(TestLog4.java:10)
    %x: 输出和当前线程相关联的NDC(嵌套诊断环境),尤其用到像java servlets这样的多客户多线程的应用中。
    %%: 输出一个"%"字符
    %F: 输出日志消息产生时所在的文件名称
    %L: 输出代码中的行号
    %m: 输出代码中指定的消息,产生的日志具体信息
    %n: 输出一个回车换行符，Windows平台为"\r\n"，Unix平台为"\n"输出日志信息换行

    可以在%与模式字符之间加上修饰符来控制其最小宽度、最大宽度、和文本的对齐方式。如：
      1)%20c：指定输出category的名称，最小的宽度是20，如果category的名称小于20的话，默认的情况下右对齐。
      2)%-20c:指定输出category的名称，最小的宽度是20，如果category的名称小于20的话，"-"号指定左对齐。
      3)%.30c:指定输出category的名称，最大的宽度是30，如果category的名称大于30的话，就会将左边多出的字符截掉，但小于30的话也不会有空格。
      4)%20.30c:如果category的名称小于20就补空格，并且右对齐，如果其名称长于30字符，就从左边交远销出的字符截掉。
-->